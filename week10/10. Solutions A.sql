-- Task 01. -> classicmodels database
-- Write a query that will count how many orders were created 
-- starting from October 10th, 2003, and September 9th, 2004 for each status.
SELECT COUNT(orderNumber) AS "Number of created orders", status
FROM orders
WHERE orderDate BETWEEN '2003-10-10' AND '2004-9-9'
GROUP BY status;

-- Task 02. -> classicmodels database
-- Get the product code, orderLineNumber, and average priceEach
-- for every product and every orderLineNumber where max priceEach 
-- is greater than 100. Order the result set by product code in descending order.
SELECT productCode, orderLineNumber, AVG(priceEach)
FROM orderdetails
GROUP BY productCode, orderLineNumber
HAVING MAX(priceEach) > 100
ORDER BY productCode DESC;

-- Task 03. -> classicmodels
-- Calculate the total revenue for each customer, showing the customer's name,
-- total revenue (quantityOrdered * priceEach), and the number of orders they placed.
-- Include only customers with total revenue exceeding $50,000.
SELECT c.customerName, 
       SUM(od.quantityOrdered * od.priceEach) AS totalRevenue, 
       COUNT(o.orderNumber) AS numberOfOrders
FROM customers c
JOIN orders o ON c.customerNumber = o.customerNumber
JOIN orderdetails od ON o.orderNumber = od.orderNumber
GROUP BY c.customerName
HAVING totalRevenue > 50000
ORDER BY totalRevenue DESC;

-- Task 04. -> classicmodels database
-- For each employee, find the total number of customers they manage and
-- the total sales generated by those customers. Include only employees
-- managing more than 5 customers.
SELECT e.firstName, e.lastName, 
       COUNT(DISTINCT c.customerNumber) AS totalCustomers, 
       SUM(od.quantityOrdered * od.priceEach) AS totalSales
FROM employees e
JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber
JOIN orders o ON c.customerNumber = o.customerNumber
JOIN orderdetails od ON o.orderNumber = od.orderNumber
GROUP BY e.employeeNumber, e.firstName, e.lastName
HAVING totalCustomers > 5
ORDER BY totalSales DESC;

-- Task 05. -> sakila database
-- Write a query to find the average rental rate of films in each category.
-- Only include categories where the average rental rate is higher than 3.00.
SELECT c.name AS "Category name", AVG(rental_rate) AS "Avg rental rate"
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY fc.category_id
HAVING AVG(rental_rate) > 3.00;

-- Task 06. -> sakila database
-- Write a query to calculate the average rental duration of films for each city.
-- Include only those cities where the average rental duration is greater than 4 days.
SELECT ci.city AS "City name", AVG(f.rental_duration) AS "Average rental duration"
FROM city ci
JOIN address a ON ci.city_id = a.city_id
JOIN store s ON a.address_id = s.address_id
JOIN inventory i ON s.store_id = i.store_id
JOIN film f ON i.film_id = f.film_id
GROUP BY ci.city
HAVING AVG(f.rental_duration) > 4;

-- Task 07. -> sakila database
-- Find the total revenue generated by each actor, showing their
-- full name and the total number of films they appeared in.
-- Include only actors who have generated more than $2,000 in revenue.
SELECT a.first_name, a.last_name, 
       SUM(p.amount) AS totalRevenue, 
       COUNT(DISTINCT f.film_id) AS totalFilms
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY a.actor_id, a.first_name, a.last_name
HAVING totalRevenue > 2000
ORDER BY totalRevenue DESC;

-- Task 08. -> sakila database
-- Calculate the average rental duration for films in each category,
-- showing the category name and the average duration.
-- Include only categories where the average rental duration exceeds 5 days.
SELECT c.name AS categoryName, 
       AVG(f.rental_duration) AS avgRentalDuration
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
HAVING avgRentalDuration > 5
ORDER BY avgRentalDuration DESC;

-- Task 09. -> sakila database
-- For each city, find the total number of rentals and the total revenue generated.
-- Include only cities with more than 25 rentals.
SELECT ci.city, 
       COUNT(r.rental_id) AS totalRentals, 
       SUM(p.amount) AS totalRevenue
FROM city ci
JOIN address a ON ci.city_id = a.city_id
JOIN customer c ON a.address_id = c.address_id
JOIN rental r ON c.customer_id = r.customer_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY ci.city
HAVING totalRentals > 25
ORDER BY totalRevenue DESC;

-- Task 10. -> employees database
-- Write a query to calculate the maximum and minimum salary for each employee.
SELECT e.first_name, e.last_name, e.emp_no,
       MAX(s.salary) AS "Max salary",
       MIN(s.salary) AS "Min salary"
FROM employees e
JOIN salaries s ON e.emp_no = s.emp_no
GROUP BY e.emp_no, e.first_name, e.last_name;

-- Task 11. -> employees database
-- Calculate the average salary for each job title over time.
-- Include the title and average salary, and present the results 
-- ordered by the title alphabetically.
SELECT t.title, AVG(s.salary) AS average_salary
FROM titles t
JOIN salaries s ON t.emp_no = s.emp_no
GROUP BY t.title
ORDER BY t.title;

-- Task 12. -> employees database
-- Generate a JSON array for each department containing the names of employees and their job titles.
SELECT d.dept_name AS departmentName, 
       JSON_ARRAYAGG(JSON_OBJECT('firstName', e.first_name, 'lastName', e.last_name, 'title', t.title)) AS employeeTitles
FROM departments d
JOIN dept_emp de ON d.dept_no = de.dept_no
JOIN employees e ON de.emp_no = e.emp_no
JOIN titles t ON e.emp_no = t.emp_no
GROUP BY d.dept_no, d.dept_name;

-- Task 13. -> employees database
-- Find the employee ID, first name, and last name of employees who have worked in multiple departments.
SELECT e.emp_no, e.first_name, e.last_name
FROM employees e
JOIN dept_emp de ON e.emp_no = de.emp_no
GROUP BY e.emp_no, e.first_name, e.last_name
HAVING COUNT(DISTINCT de.dept_no) > 1;

-- Task 14. -> employees database
-- List employees who have only ever had salaries within the range of $70,000 to $80,000 
-- and whose first name ends with ‘r’.
SELECT e.emp_no, e.first_name, e.last_name
FROM employees e
JOIN salaries s ON e.emp_no = s.emp_no
WHERE e.first_name LIKE '%r'
GROUP BY e.emp_no, e.first_name, e.last_name
HAVING MAX(s.salary) <= 80000 AND MIN(s.salary) >= 70000;